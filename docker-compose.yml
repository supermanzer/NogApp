######################################################################
# DOCKER-COMPOSE.YML - Defining the container configuration we will
# utilize for the production level application.  The main difference
# between this and our local development "docker-compose.yml" file is
# that it relies upon the NGINX server while the dev version uses
# the Django development server.
######################################################################

services:
  # First we will define the container for our Django application
  django:
    restart: always
    build: ./nog_app/
      # This building process will ensure we build a
      # container with all the requirements we need.
    # command: ./run_web.sh
    volumes:
      - ./nog_app/:/app
      - /var/log/gunicorn
    links:
      - postgres:postgres
      # - redis:redis
    ports:
      - "8000:8000"
      - "8765:8765" # useful for using the django development server
    expose:
      - "9000"
    env_file:
      - .env
    depends_on:
      - postgres
    # Defining our NGINX Web Server container
    # nginx:
    # restart: always
    # build: ./nginx/
    #   # We build this so we can create the log files
    #   # and esure we use the correct configuration.
    # volumes:
    #   - ./django:/www
    #   - /home/logs/
    # links:
    #   - django:django
    # ports:
    #   - "8000:80"

    # # Defining our database server container.
  postgres:
    restart: always
    image: postgres:latest # Getting the most up-to-date and cool postgres server instance.
    volumes:
      - pg-data:/var/lib/postgresql/data
    expose:
      - "5432"
    env_file:
      - .env
    ports:
      - "5466:5432" # aboiding port collision with any Postgres server on the host

# Mapping an external data volume to be mounted on the Docker network.  This will allow us to destroy and rebuild our Postgres server without loosing data.
volumes:
  pg-data:
